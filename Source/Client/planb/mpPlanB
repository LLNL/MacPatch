#!/usr/bin/env python

'''
 Copyright (c) 2013, Lawrence Livermore National Security, LLC.
 Produced at the Lawrence Livermore National Laboratory (cf, DISCLAIMER).
 Written by Charles Heizer <heizer1 at llnl.gov>.
 LLNL-CODE-636469 All rights reserved.
 
 This file is part of MacPatch, a program for installing and patching
 software.
 
 MacPatch is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License (as published by the Free
 Software Foundation) version 2, dated June 1991.
 
 MacPatch is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the terms and conditions of the GNU General Public
 License for more details.
 
 You should have received a copy of the GNU General Public License along
 with MacPatch; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
'''


import json
import os
import sys
import plistlib
import subprocess
import urllib2

from distutils.version import LooseVersion, StrictVersion
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# create a file handler
handler = logging.FileHandler('/Library/Logs/mp_planb.log')
handler.setLevel(logging.INFO)

# create a logging format
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

# add the handlers to the logger
logger.addHandler(handler)


MINAGENTVER="3.1.0.0.9"
DAYSRANGE=15

def hasAgent():
	if not os.path.exists('/Library/MacPatch/Client/MPAgent'):
		return False
	else:
		return True

def hasMinVersion():
	mpVerPlist = plistlib.readPlist("/Library/MacPatch/Client/.mpVersion.plist")
	currentVersion = mpVerPlist['version'] +"."+ mpVerPlist['build']
	if LooseVersion(MINAGENTVER) > LooseVersion(currentVersion):
		logger.error('Failed Min Version, min=%s, found=%s',MINAGENTVER,currentVersion)
		return False
	else:
		return True

def hasCheckedIn(clientID):
	result = False
	response = urllib2.urlopen('https://mpprod01.llnl.gov:3600/api/v1/client/checkin/info/'+clientID)
	data = json.load(response)   
	if 'result' in data:
		mdate = data['result']['mdate2']
		if mdate:
			# 08/03/2018 14:34:35
			datetime_object = datetime.strptime(mdate, '%m/%d/%Y %H:%M:%S')
			now = datetime.now()
			if now-timedelta(days=DAYSRANGE) <= datetime_object <= now:
				result = True
			else:
				logger.error('Failed Checkin, lastdate=%s',mdate)

	return result


def clientID():
	# IOPlatformUUID
	plist_data_raw = subprocess.check_output(["ioreg", "-rd1", "-c", "IOPlatformExpertDevice", "-a"])
	plist_data = plistlib.readPlistFromString(plist_data_raw)
	return plist_data[0]['IOPlatformUUID']

def main():
	logger.info("Running MacPatch plan b checks.")
	runPlanB = 0
	cid = clientID()
	if hasAgent() == False:
		logger.error("Failed Agent Check")
		runPlanB = runPlanB + 1

	if hasMinVersion() == False:
		logger.error("Failed Min Version")
		runPlanB = runPlanB + 1

	if hasCheckedIn(cid) == False:
		logger.error("Failed Checkin")
		runPlanB = runPlanB + 1

	if runPlanB > 0:
		logger.error("Checks failed, need to run plan b.")
		planBRes = subprocess.check_output(["/usr/local/sbin/planb"])
		logger.info(planBRes)
	else:
		logger.info("No update needed.")

if __name__ == '__main__':
	main()	