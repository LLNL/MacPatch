{
    "docs": [
        {
            "location": "/index.html", 
            "text": "MacPatch v3.1\n\n\nOverview\n\n\nMacPatch simplifies the act of patching and installing software on Mac OS X based systems. The client relies on using the built-in software update application for patching the Mac OS X system updates and it's own scan and patch engine for custom patches.\n\n\nMacPatch offers features and functionality that provide Mac OS X administrators with best possible patching solution to meet the challenges of supporting Mac OS X in a Workgroup or Enterprise.\n\n\nFeatures\n\n\n\n\nCustom patch creation\n\n\nCustom patch groups\n\n\nEnd-User Self Patch\n\n\nSoftware Distribution\n\n\nInventory Collection\n\n\nBasic Reporting\n\n\nMac OS X Profiles support\n\n\nAutoPKG support\n\n\n\n\nHelp\n\n\nFor questions or help visit\n\n\n\n\nMacPatch\n Google group\n\n\nMacPatch\n Slack group\n\n\n\n\nSource\n\n\n\n\nMacPatch - GITHUB", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#macpatch-v31", 
            "text": "", 
            "title": "MacPatch v3.1"
        }, 
        {
            "location": "/index.html#overview", 
            "text": "MacPatch simplifies the act of patching and installing software on Mac OS X based systems. The client relies on using the built-in software update application for patching the Mac OS X system updates and it's own scan and patch engine for custom patches.  MacPatch offers features and functionality that provide Mac OS X administrators with best possible patching solution to meet the challenges of supporting Mac OS X in a Workgroup or Enterprise.", 
            "title": "Overview"
        }, 
        {
            "location": "/index.html#features", 
            "text": "Custom patch creation  Custom patch groups  End-User Self Patch  Software Distribution  Inventory Collection  Basic Reporting  Mac OS X Profiles support  AutoPKG support", 
            "title": "Features"
        }, 
        {
            "location": "/index.html#help", 
            "text": "For questions or help visit   MacPatch  Google group  MacPatch  Slack group", 
            "title": "Help"
        }, 
        {
            "location": "/index.html#source", 
            "text": "MacPatch - GITHUB", 
            "title": "Source"
        }, 
        {
            "location": "/server_install/index.html", 
            "text": "Table of Contents\n\n\n\n\nRequired Software\n\n\nPerquisites\n\n\nLinux Packages\n\n\nMySQL\n\n\n\n\n\n\nDownload, Setup and Install\n\n\nGet Software\n\n\nSetup Database\n\n\nInstall Server Software\n\n\nConfigure Server Software\n\n\nLoad and Populate Database\n\n\n\n\n\n\nServer Setup \n Configuration\n\n\nFirst Login\n\n\nServer Configuration\n\n\nDefault Patch Group Configuration\n\n\nClient Agent Configuration\n\n\n\n\n\n\nDownload and Add Patch Content\n\n\nApple Patches\n\n\nCustom Patches\n\n\n\n\n\n\n\n\nPrequisits \n Requirements\n\n\nroot or sudo access will be needed to perform these tasks.\n\n\nRequirements \n\n\n\n\nOperating System:\n\n\nmacOS\n\n\nMac OS X 10.10 or higher\n\n\n\n\n\n\nLinux\n\n\nRHEL 7.x or CentOS 7.x\n\n\nUbuntu Server 16.04\n\n\n\n\n\n\n\n\n\n\nRAM: 4 Gig min\n\n\nMySQL (5.6.x is Recommended)\n\n\nMySQL 8 not tested.\n\n\n\n\n\n\n\n\nPerquisites \n\n\n\n\nInstall MySQL 5.6.x (must have root password)\n\n\nIf Installing on Mac OS X, \nXcode and command line developer tools\n need to be installed \nAND\n the license agreement needs to have been accepted.\n\n\n\n\nLinux Packages \n\n\nThe MacPatch server build script will attempt to install a number of required software packages there are a few packages that are recommended that be installed prior to running the build script.\n\n\nRedHat \n CentOS\n\n\nRedHat \n CentOS will require the \"Development tools\" group install. This group has a number of packages needed to build the MacPatch server.\n\n\nyum groupinstall \"Development tools\"\nyum install epel-release\n\n\n\nUbuntu\n\n\napt-get install build-essential\n\n\n\nMySQL \n\n\nWhile MySQL 5.6 is still the recommended database version. MySQL 5.7 has been out for some time now. MySQL changed the sql_mode settings in 5.7 which broke some queries in MacPatch. In order to use MacPatch with MySQL 5.7 the \nsql_mode\n setting will have to be changed.\n\n\nTo view and set the config use\n\n\nSELECT @@GLOBAL.sql_mode;\nSET GLOBAL sql_mode = 'modes';\n\n\n\nThe default SQL mode in MySQL 5.7 includes these modes:\n\n\nONLY_FULL_GROUP_BY, STRICT_TRANS_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER, and NO_ENGINE_SUBSTITUTION.\n\n\n\nThe default SQL mode in MySQL 5.6 includes this mode:\n\n\nNO_ENGINE_SUBSTITUTION\n\n\n\nPreliminary testing has been successful when removing the \nONLY_FULL_GROUP_BY\n mode.\n\n\nDownload, Setup and Install \n\n\nGet Software \n\n\n    mkdir /opt (If Needed)\n    cd /opt\n    git clone https://github.com/LLNL/MacPatch.git\n\n\n\nSetup Database \n\n\nThe database setup script only creates the MacPatch database and the 2 database accounts needed to use the database. Tuning the MySQL server is out of scope for this document.\n\n\nPlease remeber the passwords for mpdbadm and mpdbro accounts while running this script. They will be required during the SetupServer.py script database section.\n\n\n    cd /opt/MacPatch/Server/conf/scripts/setup\n    ./MPDBSetup.sh (must be run on the MySQL server)\n\n\n\nNote:\n The MPDBSetup.sh \ncan be/should be\n copied to another host if the database exists on a seperate server.\n\n\nInstall Software \n\n\n    cd /opt/MacPatch/Scripts\n    sudo ./MPBuildServer.sh\n\n\n\nNote:\n If your behind a SSL content inspector add the custom ca using\n\n\n    export PIP_CERT=/path/to/ca/cert.crt\n\n\n\nConfigure Server Software \n\n\n    cd /opt/MacPatch/Server/conf/scripts/setup\n    sudo ./ServerSetup.py --setup\n\n\n\nConfigure MacPatch schema \n populate default data \n\n\n    cd /opt/MacPatch/Server/apps\n    source env/bin/activate\n    ./mpapi.py db upgrade head\n    ./mpapi.py populate_db\n    deactivate\n\n\n\nNote:\n If \"mpapi.py db upgrade head\" is done using a root shell. Please delete the \"/opt/MacPatch/Server/logs/mpwsapi.log\" file. It will be owned by root and the REST api will not launch.\n\n\nStart Services\n\n\n    cd /opt/MacPatch/Server/conf/scripts/setup\n    sudo ./ServerSetup.py --load All\n\n\n\n--\n\n\nServer Setup \n Configuration \n\n\nThe MacPatch server software has now been installed and should be up and running. The server is almost ready for accepting clients. There are a few more server configuration settings which need to be configured.\n\n\nFirst Login \n\n\nThe default user name is \u201cmpadmin\u201d and the password is \u201c*mpadmin*\u201d, Unless it was changed using the \u201cServerSetup.py\u201d script. You will need to login for the first time with this account to do all of the setup tasks. Once these tasks are completed it\u2019s recommended that this account be disabled. This can be done by editing the \nsiteconfig.json\n file, which is located in /opt/MacPatch/Server/etc/.\n\n\nFrom:\n\n\n\n\n\"users\": {\n    \"admin\": {\n        \"enabled\": true,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}\n\n\n\n\nTo:\n\n\n\n\n\"users\": {\n    \"admin\": {\n        \"enabled\": false,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}\n\n\n\n\nServer Configuration \n\n\nEach MacPatch server needs to be added to the environment. The master server is always added automatically.\n\n\nIt is recommended that you login and verify the master server settings. It is common during install that the master server address will be added as localhost or 127.0.0.1. Please make sure that the correct hostname or IP address is set and that \n\"active\"\n is enabled.\n\n\n\n\nGo to \u201cAdmin -\n Server -\n MacPatch Servers\u201d\n\n\nDouble Click the row with your server or single click the row and click the \u201cPencil\u201d button.\n\n\n\n\nDefault Patch Group Configuration \n\n\nA default patch group will be created during install. The name of the default patch group is \u201cDefault\u201d. You may use it or create a new one.\n\n\nTo edit the contents for the patch group simply click the \u201cPencil\u201d icon next to the group name. To add patches click the check boxes to add or subtract patches from the group. When done click the \u201cSave\u201d icon. (Important Step)\n\n\n\n\nGo to \u201cPatches -\n Patch Groups\u201d\n\n\nDouble Click the row with your server or single click the row and click the \u201cPencil\u201d button.\n\n\n\n\nClient Agent Configuration \n\n\nA default agent configuration is added during the install. Please verify the client agent configuration before the client agent is uploaded.\n\n\nRecommended\n\n\n\n\nGo to \u201cAdmin -\n Client Agents -\n Configure\u201d\n\n\nSet the following 3 properties to be enforced\n\n\nMPServerAddress\n\n\nMPServerPort\n\n\nMPServerSSL\n\n\n\n\n\n\nVerify the \u201cPatchGroup\u201d setting. If you have changed it set it before you upload the client agent.\n\n\nClick the save button\n\n\nClick the icon in the \u201cDefault\u201d column for the default configuration. (Important Step)\n\n\nSet MPServerAllowSelfSigned to 1 if your in a test environment and not using a valid SSL vertificate.\n\n\n\n\nOnly the default agent configuration will get added to the client agent upon upload.\n\n\n--\n\n\nDownload \n Add Patch Content \n\n\nApple Updates\n \n\n\nApple patch content will download eventually on it\u2019s own cycle, but for the first time it\u2019s recommended to download it manually.\n\n\nThe Apple Software Update content settings are stored in a json file (/opt/MacPatch/Server/etc/patchloader.json). By default, Apple patches for 10.9 through 10.12 will be processed and supported.\n\n\nRun the following command via the Terminal on the Master MacPatch server.\n\n\nLinux\n\n\n# sudo -u www-data /opt/MacPatch/Server/conf/scripts/MPSUSPatchSync.py\n\n\n\nMac\n\n\n# sudo -u _appserver /opt/MacPatch/Server/conf/scripts/MPSUSPatchSync.py\n\n\n\nCustom Updates\n \n\n\nTo create your own custom patch content please read the \"Custom Patch Content\" \ndocs\n.\n\n\nTo use \"AutoPkg\" to add patch content please read the \"AutoPkg patch content\" \ndocs\n.", 
            "title": "Server Install & Setup"
        }, 
        {
            "location": "/server_install/index.html#table-of-contents", 
            "text": "Required Software  Perquisites  Linux Packages  MySQL    Download, Setup and Install  Get Software  Setup Database  Install Server Software  Configure Server Software  Load and Populate Database    Server Setup   Configuration  First Login  Server Configuration  Default Patch Group Configuration  Client Agent Configuration    Download and Add Patch Content  Apple Patches  Custom Patches", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/server_install/index.html#prequisits-requirements", 
            "text": "root or sudo access will be needed to perform these tasks.", 
            "title": "Prequisits &amp; Requirements"
        }, 
        {
            "location": "/server_install/index.html#requirements", 
            "text": "Operating System:  macOS  Mac OS X 10.10 or higher    Linux  RHEL 7.x or CentOS 7.x  Ubuntu Server 16.04      RAM: 4 Gig min  MySQL (5.6.x is Recommended)  MySQL 8 not tested.", 
            "title": "Requirements "
        }, 
        {
            "location": "/server_install/index.html#perquisites", 
            "text": "Install MySQL 5.6.x (must have root password)  If Installing on Mac OS X,  Xcode and command line developer tools  need to be installed  AND  the license agreement needs to have been accepted.", 
            "title": "Perquisites "
        }, 
        {
            "location": "/server_install/index.html#linux-packages", 
            "text": "The MacPatch server build script will attempt to install a number of required software packages there are a few packages that are recommended that be installed prior to running the build script.  RedHat   CentOS  RedHat   CentOS will require the \"Development tools\" group install. This group has a number of packages needed to build the MacPatch server.  yum groupinstall \"Development tools\"\nyum install epel-release  Ubuntu  apt-get install build-essential", 
            "title": "Linux Packages "
        }, 
        {
            "location": "/server_install/index.html#mysql", 
            "text": "While MySQL 5.6 is still the recommended database version. MySQL 5.7 has been out for some time now. MySQL changed the sql_mode settings in 5.7 which broke some queries in MacPatch. In order to use MacPatch with MySQL 5.7 the  sql_mode  setting will have to be changed.  To view and set the config use  SELECT @@GLOBAL.sql_mode;\nSET GLOBAL sql_mode = 'modes';  The default SQL mode in MySQL 5.7 includes these modes:  ONLY_FULL_GROUP_BY, STRICT_TRANS_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER, and NO_ENGINE_SUBSTITUTION.  The default SQL mode in MySQL 5.6 includes this mode:  NO_ENGINE_SUBSTITUTION  Preliminary testing has been successful when removing the  ONLY_FULL_GROUP_BY  mode.", 
            "title": "MySQL "
        }, 
        {
            "location": "/server_install/index.html#download-setup-and-install", 
            "text": "", 
            "title": "Download, Setup and Install "
        }, 
        {
            "location": "/server_install/index.html#get-software", 
            "text": "mkdir /opt (If Needed)\n    cd /opt\n    git clone https://github.com/LLNL/MacPatch.git", 
            "title": "Get Software "
        }, 
        {
            "location": "/server_install/index.html#setup-database", 
            "text": "The database setup script only creates the MacPatch database and the 2 database accounts needed to use the database. Tuning the MySQL server is out of scope for this document.  Please remeber the passwords for mpdbadm and mpdbro accounts while running this script. They will be required during the SetupServer.py script database section.      cd /opt/MacPatch/Server/conf/scripts/setup\n    ./MPDBSetup.sh (must be run on the MySQL server)  Note:  The MPDBSetup.sh  can be/should be  copied to another host if the database exists on a seperate server.", 
            "title": "Setup Database "
        }, 
        {
            "location": "/server_install/index.html#install-software", 
            "text": "cd /opt/MacPatch/Scripts\n    sudo ./MPBuildServer.sh  Note:  If your behind a SSL content inspector add the custom ca using      export PIP_CERT=/path/to/ca/cert.crt", 
            "title": "Install Software "
        }, 
        {
            "location": "/server_install/index.html#configure-server-software", 
            "text": "cd /opt/MacPatch/Server/conf/scripts/setup\n    sudo ./ServerSetup.py --setup", 
            "title": "Configure Server Software "
        }, 
        {
            "location": "/server_install/index.html#configure-macpatch-schema-populate-default-data", 
            "text": "cd /opt/MacPatch/Server/apps\n    source env/bin/activate\n    ./mpapi.py db upgrade head\n    ./mpapi.py populate_db\n    deactivate  Note:  If \"mpapi.py db upgrade head\" is done using a root shell. Please delete the \"/opt/MacPatch/Server/logs/mpwsapi.log\" file. It will be owned by root and the REST api will not launch.", 
            "title": "Configure MacPatch schema &amp; populate default data "
        }, 
        {
            "location": "/server_install/index.html#start-services", 
            "text": "cd /opt/MacPatch/Server/conf/scripts/setup\n    sudo ./ServerSetup.py --load All  --", 
            "title": "Start Services"
        }, 
        {
            "location": "/server_install/index.html#server-setup-configuration", 
            "text": "The MacPatch server software has now been installed and should be up and running. The server is almost ready for accepting clients. There are a few more server configuration settings which need to be configured.", 
            "title": "Server Setup &amp; Configuration "
        }, 
        {
            "location": "/server_install/index.html#first-login", 
            "text": "The default user name is \u201cmpadmin\u201d and the password is \u201c*mpadmin*\u201d, Unless it was changed using the \u201cServerSetup.py\u201d script. You will need to login for the first time with this account to do all of the setup tasks. Once these tasks are completed it\u2019s recommended that this account be disabled. This can be done by editing the  siteconfig.json  file, which is located in /opt/MacPatch/Server/etc/.  From:   \"users\": {\n    \"admin\": {\n        \"enabled\": true,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}   To:   \"users\": {\n    \"admin\": {\n        \"enabled\": false,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}", 
            "title": "First Login "
        }, 
        {
            "location": "/server_install/index.html#server-configuration", 
            "text": "Each MacPatch server needs to be added to the environment. The master server is always added automatically.  It is recommended that you login and verify the master server settings. It is common during install that the master server address will be added as localhost or 127.0.0.1. Please make sure that the correct hostname or IP address is set and that  \"active\"  is enabled.   Go to \u201cAdmin -  Server -  MacPatch Servers\u201d  Double Click the row with your server or single click the row and click the \u201cPencil\u201d button.", 
            "title": "Server Configuration "
        }, 
        {
            "location": "/server_install/index.html#default-patch-group-configuration", 
            "text": "A default patch group will be created during install. The name of the default patch group is \u201cDefault\u201d. You may use it or create a new one.  To edit the contents for the patch group simply click the \u201cPencil\u201d icon next to the group name. To add patches click the check boxes to add or subtract patches from the group. When done click the \u201cSave\u201d icon. (Important Step)   Go to \u201cPatches -  Patch Groups\u201d  Double Click the row with your server or single click the row and click the \u201cPencil\u201d button.", 
            "title": "Default Patch Group Configuration "
        }, 
        {
            "location": "/server_install/index.html#client-agent-configuration", 
            "text": "A default agent configuration is added during the install. Please verify the client agent configuration before the client agent is uploaded.  Recommended   Go to \u201cAdmin -  Client Agents -  Configure\u201d  Set the following 3 properties to be enforced  MPServerAddress  MPServerPort  MPServerSSL    Verify the \u201cPatchGroup\u201d setting. If you have changed it set it before you upload the client agent.  Click the save button  Click the icon in the \u201cDefault\u201d column for the default configuration. (Important Step)  Set MPServerAllowSelfSigned to 1 if your in a test environment and not using a valid SSL vertificate.   Only the default agent configuration will get added to the client agent upon upload.  --", 
            "title": "Client Agent Configuration "
        }, 
        {
            "location": "/server_install/index.html#download-add-patch-content", 
            "text": "Apple Updates    Apple patch content will download eventually on it\u2019s own cycle, but for the first time it\u2019s recommended to download it manually.  The Apple Software Update content settings are stored in a json file (/opt/MacPatch/Server/etc/patchloader.json). By default, Apple patches for 10.9 through 10.12 will be processed and supported.  Run the following command via the Terminal on the Master MacPatch server.  Linux  # sudo -u www-data /opt/MacPatch/Server/conf/scripts/MPSUSPatchSync.py  Mac  # sudo -u _appserver /opt/MacPatch/Server/conf/scripts/MPSUSPatchSync.py  Custom Updates    To create your own custom patch content please read the \"Custom Patch Content\"  docs .  To use \"AutoPkg\" to add patch content please read the \"AutoPkg patch content\"  docs .", 
            "title": "Download &amp; Add Patch Content "
        }, 
        {
            "location": "/client_build_install/index.html", 
            "text": "Description\n\n\nThis document will walk you through the build and upload of the MacPatch 3.1.x client agent.\n\n\nWhen cloning the MacPatch software from GitHub includes the latest version of the client agent software. All of the bnaries are signed as part of this process. This compiled agent can be uploaded to the MacPatch server as is. If you wish to build and compile your own client agent, this is fully supported as well.\n\n\nTable of Contents\n\n\n\n\nRequirements\n\n\nBuild Client\n\n\nUpload Client\n\n\n\n\nRequirements \n\n\n\n\nOperating System:\n\n\nmacOS\n\n\nMac OS X 10.10 or higher\n\n\n\n\n\n\n\n\n\n\nXcode.app and command line developer tools\n\n\nthe license agreement needs to have been accepted.\n\n\n\n\n\n\n\n\nBuild and Compile Client Software \n\n\nCompiling the MacPatch client software is a pretty simple process. Inside the cloned MacPatch repository contains the \nMPBuildClient.sh\n script. This script will need to be run using sudo.\n\n\nThe script will ask a few questions in regards to building the client installer package. First you will be asked for the client version. Please enter a client version. Since your compiling your own you can use what ever versioning you wish. Next a build number is required and a miniumum macOS version. With those settings entered, you only have 2 more. Next you'll be asked for agent build state, by default it's set to release. If your going to tweek the agent I recommend using the Alpha and Beta stages. The last question is if you want to code sign the MacPatch client binaries.\n\n\nNote:\n Please use the Mac Developer certificate to sign your binaries.\n\n\nOnce completed the script will open the directory containing the zipped PKG installer of the MacPatch client. The directory is \n/private/tmp/MP/Client31\n.\n\n\nUpload Client Software \n\n\nUploading the client agent is a fairly simple process. Either you will upload the \nMPClientInstall.pkg.zip\n from \n/opt/MacPatch/Source/Agent\n or from \n/private/tmp/MP/Client31\n, if you have compiled the agent your self.\n\n\nTo get the agent uploader application you can login to the agent console and download it from \nAdmin-\n Client Agents -\n Deploy\n or \n/opt/MacPatch/Server/conf/Content/Web/tools/MPAgentUploader.zip\n.\n\n\nBefore uploading your agent it is recommended that you verify your MacPatch server settings in the MacPatch admin console. Make sure it's enabled and that the host name and settings are correct. This can be verified at \nAdmin-\n MacPatch Servers\n\n\nUploading\n\n\nWhen uploading a new agent it's recommended that you QA the agent first by compiling and siging the agent installer localy and test it out before uploading the agent to the server.\n\n\nTo build it locally with the server settings go to Preferences and select \"Do not upload package\".\n\n\n\n\nThe agent uploader only has a few options. Here is a list and their definitions\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\nOptional\n\n\n\n\n\n\n\n\n\n\nHost\n\n\nHost name of the MacPatch master server\n\n\nRequired\n\n\n\n\n\n\nPort\n\n\nPort of the MacPatch master server api. 3600 is the default.\n\n\nRequired\n\n\n\n\n\n\nPackage\n\n\nPlease use the choose button to propogate the agent path. Also please use the pkg.zip\n\n\nRequired\n\n\n\n\n\n\nIdentity\n\n\nThe apple installer certificate identity e.g(Developer ID Installer: ...)\n\n\nOptional\n\n\n\n\n\n\nSign PKG\n\n\nEnable package signing, this is highly recommended.\n\n\nOptional\n\n\n\n\n\n\nPlugins\n\n\nMacPatch supports custom inventory plugins, this is a directory containing your custom plugins.\n\n\nOptional\n\n\n\n\n\n\nOS Config Profiles\n\n\nDirectory containing macOS config profiles to get installed with the agent. I use this for intermediate certificates.\n\n\nOptional\n\n\n\n\n\n\nRegistration key\n\n\nRegistration key to register the client with the MacPatch server. This feature is optional if using Auto registration.\n\n\nOptional", 
            "title": "Client Build & Upload"
        }, 
        {
            "location": "/client_build_install/index.html#description", 
            "text": "This document will walk you through the build and upload of the MacPatch 3.1.x client agent.  When cloning the MacPatch software from GitHub includes the latest version of the client agent software. All of the bnaries are signed as part of this process. This compiled agent can be uploaded to the MacPatch server as is. If you wish to build and compile your own client agent, this is fully supported as well.", 
            "title": "Description"
        }, 
        {
            "location": "/client_build_install/index.html#table-of-contents", 
            "text": "Requirements  Build Client  Upload Client", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/client_build_install/index.html#requirements", 
            "text": "Operating System:  macOS  Mac OS X 10.10 or higher      Xcode.app and command line developer tools  the license agreement needs to have been accepted.", 
            "title": "Requirements "
        }, 
        {
            "location": "/client_build_install/index.html#build-and-compile-client-software", 
            "text": "Compiling the MacPatch client software is a pretty simple process. Inside the cloned MacPatch repository contains the  MPBuildClient.sh  script. This script will need to be run using sudo.  The script will ask a few questions in regards to building the client installer package. First you will be asked for the client version. Please enter a client version. Since your compiling your own you can use what ever versioning you wish. Next a build number is required and a miniumum macOS version. With those settings entered, you only have 2 more. Next you'll be asked for agent build state, by default it's set to release. If your going to tweek the agent I recommend using the Alpha and Beta stages. The last question is if you want to code sign the MacPatch client binaries.  Note:  Please use the Mac Developer certificate to sign your binaries.  Once completed the script will open the directory containing the zipped PKG installer of the MacPatch client. The directory is  /private/tmp/MP/Client31 .", 
            "title": "Build and Compile Client Software "
        }, 
        {
            "location": "/client_build_install/index.html#upload-client-software", 
            "text": "Uploading the client agent is a fairly simple process. Either you will upload the  MPClientInstall.pkg.zip  from  /opt/MacPatch/Source/Agent  or from  /private/tmp/MP/Client31 , if you have compiled the agent your self.  To get the agent uploader application you can login to the agent console and download it from  Admin-  Client Agents -  Deploy  or  /opt/MacPatch/Server/conf/Content/Web/tools/MPAgentUploader.zip .  Before uploading your agent it is recommended that you verify your MacPatch server settings in the MacPatch admin console. Make sure it's enabled and that the host name and settings are correct. This can be verified at  Admin-  MacPatch Servers", 
            "title": "Upload Client Software "
        }, 
        {
            "location": "/client_build_install/index.html#uploading", 
            "text": "When uploading a new agent it's recommended that you QA the agent first by compiling and siging the agent installer localy and test it out before uploading the agent to the server.  To build it locally with the server settings go to Preferences and select \"Do not upload package\".   The agent uploader only has a few options. Here is a list and their definitions     Attribute  Description  Optional      Host  Host name of the MacPatch master server  Required    Port  Port of the MacPatch master server api. 3600 is the default.  Required    Package  Please use the choose button to propogate the agent path. Also please use the pkg.zip  Required    Identity  The apple installer certificate identity e.g(Developer ID Installer: ...)  Optional    Sign PKG  Enable package signing, this is highly recommended.  Optional    Plugins  MacPatch supports custom inventory plugins, this is a directory containing your custom plugins.  Optional    OS Config Profiles  Directory containing macOS config profiles to get installed with the agent. I use this for intermediate certificates.  Optional    Registration key  Registration key to register the client with the MacPatch server. This feature is optional if using Auto registration.  Optional", 
            "title": "Uploading"
        }, 
        {
            "location": "/user_accounts/index.html", 
            "text": "Table of Contents\n\n\n\n\nDefault Admin Account\n\n\nChange Password\n\n\nDisable Admin Account\n\n\n\n\n\n\nUser Accounts\n\n\nStandard Accounts\n\n\nDirectory Accounts\n\n\n\n\n\n\nAccount Rights\n\n\n\n\nDefault Admin \n\n\nThe default admin account is local to the MacPatch server. This account should only be used for setup of the MacPatch \"Master\" server. Once a load admin account has been created. It's recommended that the admin account be disabled.\n\n\n- Change Default Admin password\n\n\nChanging the default admin account password requires editing the \nsiteconfig.json\n file. This file is lcoated in \"/opt/MacPatch/Server/etc/\". Please note, the password is in clear text.\n\n\n- Disable Default Admin account\n\n\n Disabling the default requires editing the \nsiteconfig.json\n file. This file is lcoated in \"/opt/MacPatch/Server/etc/\". To disable the account simply change the \"enabled\" key value to \"false\".\n\n\nFrom:\n\n\n\n\n\"users\": {\n    \"admin\": {\n        \"enabled\": true,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}\n\n\n\n\nTo:\n\n\n\n\n\"users\": {\n    \"admin\": {\n        \"enabled\": false,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}\n\n\n\n\nUser Accounts \n\n\nMacPatch supports 2 different accounts not including the default admin account. MacPatch supports standard database accounts and LDAP/Active Directory accounts.\n\n\n\n\nLocal Accounts\n\n\nTo add or remove a standard account, navigate to the Admin-\nAccounts menu. Simply click on the \"+\" icon just above the accounts table.\n\n\nAssiging rights to a user account is fairly straight forward. If no rights are assigned the user can login and create a Client group and a patch group. This user will also be the owner of these groups and can assign additional users who can assist in managing these options.\n\n\n\n\nDirectory Accounts\n\n\nMacPatch supports user accounts coming from LDAP/Active directory. During the server setup you were asked if you wanted to enable LDAP user support. If you answered \"Yes\", then all of your settings were entered in to the \"siteconfig.json\" file. The settings are under the \"ldap\" key.\n\n\nBy default any user in the directory is allowed to login to MacPatch. This user will have the basic standard user rights. If you wish to limit directory users who can log in to the MacPatch admin console you will need to populate to keys in the \"ldap\" dictiobnary. First you will need to enable the \"enableGroupFilter\" attribute by setting it to \"true\". Then you will need to edit the \"groupFilter\" attribute. This attribute is a list, and is just the name the LDAP group.\n\n\nExample:\n\n\"groupFilter\": ['Group1', 'Group2']\n\n\nAssiging rights to ldap users is just like a standard account. The only difference is the user has to login at least one time so that the user will show in the accounts table.\n\n\nAccount Rights \n\n\n\n\n\n\n\n\nRight\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAdmin\n\n\nThis right gives the user admin rights through out the console.\n\n\n\n\n\n\nAutoPKG\n\n\nThis right allows the user account to upload new packages using the autopkg tool.\n\n\n\n\n\n\nAgent Upload\n\n\nThis rtight allows the user to upload new MacPatch client agents.\n\n\n\n\n\n\nAPI\n\n\nThis right allows the user to access MacPatch API's for automation. (Not Completed)", 
            "title": "User Accounts"
        }, 
        {
            "location": "/user_accounts/index.html#table-of-contents", 
            "text": "Default Admin Account  Change Password  Disable Admin Account    User Accounts  Standard Accounts  Directory Accounts    Account Rights", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/user_accounts/index.html#default-admin", 
            "text": "The default admin account is local to the MacPatch server. This account should only be used for setup of the MacPatch \"Master\" server. Once a load admin account has been created. It's recommended that the admin account be disabled.", 
            "title": "Default Admin "
        }, 
        {
            "location": "/user_accounts/index.html#-change-default-admin-password", 
            "text": "Changing the default admin account password requires editing the  siteconfig.json  file. This file is lcoated in \"/opt/MacPatch/Server/etc/\". Please note, the password is in clear text.", 
            "title": "- Change Default Admin password"
        }, 
        {
            "location": "/user_accounts/index.html#-disable-default-admin-account", 
            "text": "Disabling the default requires editing the  siteconfig.json  file. This file is lcoated in \"/opt/MacPatch/Server/etc/\". To disable the account simply change the \"enabled\" key value to \"false\".  From:   \"users\": {\n    \"admin\": {\n        \"enabled\": true,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}   To:   \"users\": {\n    \"admin\": {\n        \"enabled\": false,\n        \"name\": \"mpadmin\",\n        \"pass\": \"*mpadmin*\"\n    }\n}", 
            "title": "- Disable Default Admin account"
        }, 
        {
            "location": "/user_accounts/index.html#user-accounts", 
            "text": "MacPatch supports 2 different accounts not including the default admin account. MacPatch supports standard database accounts and LDAP/Active Directory accounts.", 
            "title": "User Accounts "
        }, 
        {
            "location": "/user_accounts/index.html#local-accounts", 
            "text": "To add or remove a standard account, navigate to the Admin- Accounts menu. Simply click on the \"+\" icon just above the accounts table.  Assiging rights to a user account is fairly straight forward. If no rights are assigned the user can login and create a Client group and a patch group. This user will also be the owner of these groups and can assign additional users who can assist in managing these options.", 
            "title": "Local Accounts"
        }, 
        {
            "location": "/user_accounts/index.html#directory-accounts", 
            "text": "MacPatch supports user accounts coming from LDAP/Active directory. During the server setup you were asked if you wanted to enable LDAP user support. If you answered \"Yes\", then all of your settings were entered in to the \"siteconfig.json\" file. The settings are under the \"ldap\" key.  By default any user in the directory is allowed to login to MacPatch. This user will have the basic standard user rights. If you wish to limit directory users who can log in to the MacPatch admin console you will need to populate to keys in the \"ldap\" dictiobnary. First you will need to enable the \"enableGroupFilter\" attribute by setting it to \"true\". Then you will need to edit the \"groupFilter\" attribute. This attribute is a list, and is just the name the LDAP group.  Example: \"groupFilter\": ['Group1', 'Group2']  Assiging rights to ldap users is just like a standard account. The only difference is the user has to login at least one time so that the user will show in the accounts table.", 
            "title": "Directory Accounts"
        }, 
        {
            "location": "/user_accounts/index.html#account-rights", 
            "text": "Right  Description      Admin  This right gives the user admin rights through out the console.    AutoPKG  This right allows the user account to upload new packages using the autopkg tool.    Agent Upload  This rtight allows the user to upload new MacPatch client agents.    API  This right allows the user to access MacPatch API's for automation. (Not Completed)", 
            "title": "Account Rights "
        }, 
        {
            "location": "/apple_patches/index.html", 
            "text": "Apple patch content in MacPatch is collected from the Apple Software Update servers. Every patch apple offers is processed and posted to the MacPatch database via the \nMPSUSPatchSync.py\n script. This script is run on a 8 hour interval by default. By default all new apple patches will show up in the database with it's patch state set to \"Create\". In order for a patch to install it's state needs to be changed to \"QA\" or \"Production\".\n\n\nExample - Apple patch in \nCreate\n state\n\n\n\n\nExtending an Apple Patch \n\n\nMacPatch offers the ability to enhance and extend apple supplied patches. MacPatch offers the ability to change the order in which the patch is installed. This is done with the \"Patch Install Weight\"; the lower the number the sooner the install. By default custom patches have an install weight of 30 and apple patches have an install weight of 60. You also have the ability to override the reboot setting as well. For example if you have an apple patch that does not require a reboot you can change it so it does and vice versa.\n\n\n\n\nThe final option to extending an apple patch is being able to assign and pre and post install script.\n\n\n\n\nTesting Patch Content \n\n\nThe preferred method to testing new patches is once a patch has been created involves creating a new patch group and client group and changing the client setting for the new client group.\n\n\n\n\nCreate new patch group, call it \"QA\"\n\n\nCreate new client group, call it \"QA\"\n\n\nEdit the client group settings\n\n\nSet \"Patch Group\" to \"QA\"\n\n\nSet \"Patch State Patching\" to \"Production \n QA\"\n\n\nSave the settings\n\n\n\n\n\n\nAssign client to the \"QA\" client group\n\n\n\n\nWith the groups and the settings created, and client(s) assigned. The next step will be to change the \"Patch State\" on the newly created patch to \"QA\".\nIn this configuration any client assigned to the QA client group will now scan for the new patch, it will not patch it until the new patch has been added to the QA patch group and saved.", 
            "title": "Apple Patches"
        }, 
        {
            "location": "/apple_patches/index.html#extending-an-apple-patch", 
            "text": "MacPatch offers the ability to enhance and extend apple supplied patches. MacPatch offers the ability to change the order in which the patch is installed. This is done with the \"Patch Install Weight\"; the lower the number the sooner the install. By default custom patches have an install weight of 30 and apple patches have an install weight of 60. You also have the ability to override the reboot setting as well. For example if you have an apple patch that does not require a reboot you can change it so it does and vice versa.   The final option to extending an apple patch is being able to assign and pre and post install script.", 
            "title": "Extending an Apple Patch "
        }, 
        {
            "location": "/apple_patches/index.html#testing-patch-content", 
            "text": "The preferred method to testing new patches is once a patch has been created involves creating a new patch group and client group and changing the client setting for the new client group.   Create new patch group, call it \"QA\"  Create new client group, call it \"QA\"  Edit the client group settings  Set \"Patch Group\" to \"QA\"  Set \"Patch State Patching\" to \"Production   QA\"  Save the settings    Assign client to the \"QA\" client group   With the groups and the settings created, and client(s) assigned. The next step will be to change the \"Patch State\" on the newly created patch to \"QA\".\nIn this configuration any client assigned to the QA client group will now scan for the new patch, it will not patch it until the new patch has been added to the QA patch group and saved.", 
            "title": "Testing Patch Content "
        }, 
        {
            "location": "/custom_patches/index.html", 
            "text": "MacPatch custom patch content is pretty simple to create. All content is created via the new content wizard. Keep in mind that there are only 4 required attributes which are required to create a patch. The 4 attributes are \nPatch Name, Patch Version, Patch Group ID, Patch Package\n.\n\n\nCreate New Patch \n\n\nCreating a new patch is broken down in to 4 steps. In this example we will be creating a patch for Firefox.\n\n\nStep 1\n\n\n\n\nPatch Name, and Patch Version \nare required fields. By default a new patch has it's patch state set to \"Create\". A patch will not show as needed to a client until it's state is at least set to \"QA\".\n\n\nStep 2\n\n\n\n\nWhile none of the fields are required, adding patch detection criteria is highly recommended. In this example we have added two detection queries. The first one looks to see if the \n/Applications/Firefox.app\n exists. The second query looks to see if Firefox version is less than 30.0.0.\n\n\nFor a patch to become required all patch detection criteria queries need to return \nTrue\n. If any return false a patch is not needed.\n\n\nQuery Language Cheat Sheet\n\n\nStep 3\n\n\n\n\nPatch Group ID, and Patch Package \nare required fields.\n\n\nIn this example it's important to note that the \"Patch Group ID\" is in the form Reverse URL and similar to Bundle ID. While anything can be used as a \"Patch Group ID\", bundle id's are suggested.\n\n\nWhen uploading a patch a *.pkg.zip file is required at this time.\n\n\nStep 4\n\n\n \n \n\n\nHere you can add pre \n post requisite packages. Also, once the patch is created you will need to make it active. This can only be done once the initial patch has been created.\n\n\nPatch Criteria Syntax \n\n\n\n    \n\n        \nBase Criteria\n\n        \nDescription\n\n    \n\n\n\n    \nBundleID\n\n    \n\n        \n\n\n\n\nQuery\n\n\nValue\n\n\nQuery Result\n\n\nExample Syntax\n\n\n\n\n\n\nExists\n\n\nBundleID Value\n\n\nTrue/False\n\n\nExists@com.adobe.Reader@True\n\n\n\n\n\n\nVersion\n\n\nBundleID Value\n\n\nVersion;(EQ,LT,LTE,GT,GTE,NEQ)\n\n\nVersion@com.adobe.Reader@9.3.0;LT\n\n\n\n\n\n\n\n\n\n\n\n\nFile\n\n\n\n\n\n\n\n\nQuery\n\n\nValue\n\n\nQuery Result\n\n\nExample Syntax\n\n\n\n\n\n\nExists\n\n\nFile Path\n\n\nTrue/False\n\n\nExists@/Applications/Firefox.app@True\n\n\n\n\n\n\nDate\n\n\nFile Path\n\n\nTrue/False\n\n\nDate@/Applications/Firefox.app@2010-03-22 12:00:00;LT\n\n\n\n\n\n\nHash\n\n\nFile Path\n\n\nMD5 Hash;True/False\n\n\nHash@/Applications/Firefox.app@123432dsh2362h3h;TRUE\n\n\n\n\n\n\nVersion\n\n\nFile Path\n\n\nVersion;(EQ,LT,LTE,GT,GTE,NEQ)\n\n\nVersion@/Applications/Firefox.app@3.5.7;LT\n\n\n\n\n\n\n\n\n\n\nScript\n\n\n\n\n\n\n\n\nQuery\n\n\nValue\n\n\nQuery Result\n\n\nExample Syntax\n\n\nNotes\n\n\n\n\n\n\nScript\n\n\nScript Text\n\n\nTrue\n\n\n#!/bin/sh ...\n\n\nIf a @ is used it must be escaped with @\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting Patch Content \n\n\nThe preferred method to testing new patches is once a patch has been created involves creating a new patch group and client group and changing the client setting for the new client group.\n\n\n\n\nCreate new patch group, call it \"QA\"\n\n\nCreate new client group, call it \"QA\"\n\n\nEdit the client group settings\n\n\nSet \"Patch Group\" to \"QA\"\n\n\nSet \"Patch State Patching\" to \"Production \n QA\"\n\n\nSave the settings\n\n\n\n\n\n\nAssign client to the \"QA\" client group\n\n\n\n\nWith the groups and the settings created, and client(s) assigned. The next step will be to change the \"Patch State\" on the newly created patch to \"QA\".\nIn this configuration any client assigned to the QA client group will now scan for the new patch, it will not patch it until the new patch has been added to the QA patch group and saved.", 
            "title": "Custom Patches"
        }, 
        {
            "location": "/custom_patches/index.html#create-new-patch", 
            "text": "Creating a new patch is broken down in to 4 steps. In this example we will be creating a patch for Firefox.  Step 1   Patch Name, and Patch Version  are required fields. By default a new patch has it's patch state set to \"Create\". A patch will not show as needed to a client until it's state is at least set to \"QA\".  Step 2   While none of the fields are required, adding patch detection criteria is highly recommended. In this example we have added two detection queries. The first one looks to see if the  /Applications/Firefox.app  exists. The second query looks to see if Firefox version is less than 30.0.0.  For a patch to become required all patch detection criteria queries need to return  True . If any return false a patch is not needed.  Query Language Cheat Sheet  Step 3   Patch Group ID, and Patch Package  are required fields.  In this example it's important to note that the \"Patch Group ID\" is in the form Reverse URL and similar to Bundle ID. While anything can be used as a \"Patch Group ID\", bundle id's are suggested.  When uploading a patch a *.pkg.zip file is required at this time.  Step 4       Here you can add pre   post requisite packages. Also, once the patch is created you will need to make it active. This can only be done once the initial patch has been created.", 
            "title": "Create New Patch "
        }, 
        {
            "location": "/custom_patches/index.html#patch-criteria-syntax", 
            "text": "Base Criteria \n         Description \n      \n     BundleID \n     \n           Query  Value  Query Result  Example Syntax    Exists  BundleID Value  True/False  Exists@com.adobe.Reader@True    Version  BundleID Value  Version;(EQ,LT,LTE,GT,GTE,NEQ)  Version@com.adobe.Reader@9.3.0;LT       File     Query  Value  Query Result  Example Syntax    Exists  File Path  True/False  Exists@/Applications/Firefox.app@True    Date  File Path  True/False  Date@/Applications/Firefox.app@2010-03-22 12:00:00;LT    Hash  File Path  MD5 Hash;True/False  Hash@/Applications/Firefox.app@123432dsh2362h3h;TRUE    Version  File Path  Version;(EQ,LT,LTE,GT,GTE,NEQ)  Version@/Applications/Firefox.app@3.5.7;LT      Script     Query  Value  Query Result  Example Syntax  Notes    Script  Script Text  True  #!/bin/sh ...  If a @ is used it must be escaped with @", 
            "title": "Patch Criteria Syntax "
        }, 
        {
            "location": "/custom_patches/index.html#testing-patch-content", 
            "text": "The preferred method to testing new patches is once a patch has been created involves creating a new patch group and client group and changing the client setting for the new client group.   Create new patch group, call it \"QA\"  Create new client group, call it \"QA\"  Edit the client group settings  Set \"Patch Group\" to \"QA\"  Set \"Patch State Patching\" to \"Production   QA\"  Save the settings    Assign client to the \"QA\" client group   With the groups and the settings created, and client(s) assigned. The next step will be to change the \"Patch State\" on the newly created patch to \"QA\".\nIn this configuration any client assigned to the QA client group will now scan for the new patch, it will not patch it until the new patch has been added to the QA patch group and saved.", 
            "title": "Testing Patch Content "
        }, 
        {
            "location": "/patch_groups/index.html", 
            "text": "Table of Contents\n\n\n\n\nDescription\n\n\nGroup properties\n\n\nAssign patches\n\n\n\n\nPatch groups are a collection of apple and custom patches. Patch groups are used to determine which patches are approved to be installed. A patch group also has a type identifier. The type identifier is used determine the type of patches which are visible to the group. For example on a  production group will only allow you to assign production patches to it.\n\n\nGroup Properties \n\n\nThere are only a couple of things to remember about patch groups. The owner of the group has the ability to assign other admins which can add and subtract patches from the group. The owner is the only account which can re-name the patch group and the owner is the only account which can re-assign ownership to another account and change it's type.\n\n\nTo edit the groups properties, simply click on the \"Pencil\" icon for the group.\n\n\n\nPatch group properties\n\n\n\n\nAssign Patches \n\n\nTo assign patches to a patch group click on the list icon \n. The patch group will open and you can assign or remove assigned patches from here. It important to note, once your done selecting your patches you will need to \"Save\" the patch group. The MacPatch client agent will not recognize the changes without saving. To save the group click on the disk icon \n.", 
            "title": "Patch Groups"
        }, 
        {
            "location": "/patch_groups/index.html#table-of-contents", 
            "text": "Description  Group properties  Assign patches   Patch groups are a collection of apple and custom patches. Patch groups are used to determine which patches are approved to be installed. A patch group also has a type identifier. The type identifier is used determine the type of patches which are visible to the group. For example on a  production group will only allow you to assign production patches to it.", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/patch_groups/index.html#group-properties", 
            "text": "There are only a couple of things to remember about patch groups. The owner of the group has the ability to assign other admins which can add and subtract patches from the group. The owner is the only account which can re-name the patch group and the owner is the only account which can re-assign ownership to another account and change it's type.  To edit the groups properties, simply click on the \"Pencil\" icon for the group.  Patch group properties", 
            "title": "Group Properties "
        }, 
        {
            "location": "/patch_groups/index.html#assign-patches", 
            "text": "To assign patches to a patch group click on the list icon  . The patch group will open and you can assign or remove assigned patches from here. It important to note, once your done selecting your patches you will need to \"Save\" the patch group. The MacPatch client agent will not recognize the changes without saving. To save the group click on the disk icon  .", 
            "title": "Assign Patches "
        }, 
        {
            "location": "/sw_groups/index.html", 
            "text": "", 
            "title": "Groups"
        }, 
        {
            "location": "/sw_tasks/index.html", 
            "text": "", 
            "title": "Tasks"
        }, 
        {
            "location": "/sw_packages/index.html", 
            "text": "", 
            "title": "Packages"
        }, 
        {
            "location": "/profiles/index.html", 
            "text": "", 
            "title": "Profiles"
        }, 
        {
            "location": "/about/license/index.html", 
            "text": "GNU GENERAL PUBLIC LICENSE\n               Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n               Our Preamble\n\n   A. This notice is required to be provided under our contract with the\nU.S. Department of Energy (DOE). This work was produced at the\nLawrence Livermore National Laboratory under Contract No.\nDE-AC52-07NA27344 with the DOE.\n\n   B. Neither the United States Government nor Lawrence Livermore National\nSecurity, LLC nor any of their employees, makes any warranty, express or\nimplied, or assumes any liability or responsibility for the accuracy,\ncompleteness, or usefulness of any information, apparatus, product, or process\ndisclosed, or represents that its use would not infringe privately-owned rights.\n\n   C. Also, reference herein to any specific commercial products, process,\nor services by trade name, trademark, manufacturer or otherwise does not\nnecessarily constitute or imply its endorsement, recommendation, or\nfavoring by the United States Government or Lawrence Livermore National Security,\nLLC. The views and opinions of authors expressed herein do not\nnecessarily state or reflect those of the United States Government\nor Lawrence Livermore National Security, LLC, and shall not be used for\nadvertising or product endorsement purposes. The precise terms and conditions\nfor copying, distribution and modification follows.\n\n\f\n            GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}